Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

Follow up:

Could you do this in one pass?

Solution:
	我的思路：用空间换时间，直接把每个节点的index放入map中，然后用map.size()-n找到待删除节点的
	前一个节点，这里需要注意，在遍历之前需在原链表头部添加一个空节点，因为题设只说了保证n有效，但n+1
	可能不存在。
	
	快慢指针法：先用f(fast)指针遍历n个节点，若遍历完说明size=n；否则用s指针和f指针同时开始遍历，
	此时s指针和f指针始终相差n个节点，直到s取到了倒数n+1。
	