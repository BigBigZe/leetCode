Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
Example 2:

Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

Note:

0 <= pushed.length == popped.length <= 1000
0 <= pushed[i], popped[i] < 1000
pushed is a permutation of popped.
pushed and popped have distinct values.

Solution:
	这道题其实想清楚栈的工作原理还是挺简单的。实际上不管你的popped序列是哪样，你的push
	pop操作顺序都是唯一的，比如题设给的例子，popped[0]=4，那么也就意味着你的第一次连续
	push操作（连续意味着中间没有执行pop）至少得push到4，此时栈空间为：
		1(bottom)->2->3->4(top)
	那么把4pop出之后，再看popped[1]为3，再比较到此时top=3，又进行一次pop操作，那么
	具体的抽象为：
		1.遍历popped数组，每次比较popped[i]和栈顶的元素（注意栈不能为空）
		2.如果popped[i]和top不等，那么就一直对pushed进行压栈操作，否则进行一次pop操作
		3.遍历完popped所有数后，如果栈为空，那么说明popped为正确序列，否则为false